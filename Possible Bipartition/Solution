class Solution {
    
    ArrayList<ArrayList<Integer>> graph=new ArrayList<>();
    Map<Integer,Integer> visited; //stores node and its color

    public boolean possibleBipartition(int N, int[][] dislikes) {
        for (int i = 0; i <= N; ++i)
            graph.add(new ArrayList<>());

        for (int[] edge: dislikes) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        visited = new HashMap();
        for (int node = 1; node <= N; ++node)
            if (!visited.containsKey(node) && !dfs(node, 0))
                return false;
        return true;
    }

    public boolean dfs(int node, int color) {
        if (visited.containsKey(node))
            return visited.get(node) == color;
        
        visited.put(node, color);

        for (int nei: graph.get(node))
            if (!dfs(nei, color ^ 1)) //toggle the color for all adjacent nodes
                return false;
        return true;
    }
}
