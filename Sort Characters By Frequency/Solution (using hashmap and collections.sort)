class Solution {
    
    public HashMap<Character, Integer> sortByValue(HashMap<Character, Integer> hm) 
    { 
        //The Map.Entry interface enables you to work with a map entry.
        //The entrySet() method declared by the Map interface returns a Set containing the map entries.
        //Each of these set elements is a Map.Entry object.
        
        // Create a list from elements of HashMap 
        List<Map.Entry<Character, Integer> > list = 
               new LinkedList<Map.Entry<Character, Integer> >(hm.entrySet()); 
  
        // Sort the list 
        Collections.sort(list, new Comparator<Map.Entry<Character, Integer> >() { 
            public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2) 
            { 
                //o1.compareTo.o2 for ascending order
                //thus, o2.compareTo.o1 for descending
                return (o2.getValue()).compareTo(o1.getValue()); 
            } 
        }); 
          
        // put data from sorted list to hashmap  
        HashMap<Character, Integer> temp = new LinkedHashMap<Character, Integer>(); 
        for (Map.Entry<Character, Integer> aa : list) { 
            temp.put(aa.getKey(), aa.getValue()); 
        } 
        return temp; 
    } 
    
    public String frequencySort(String s) {
        
        //storing frequency of every character of a string in a hashmap
        HashMap<Character,Integer> hm=new LinkedHashMap<>();
        for(int i=0;i<s.length();i++)
        {
            char ch=s.charAt(i);
            if(hm.isEmpty() || !hm.containsKey(ch))
            {
                hm.put(ch,1);
            }
            else
            {
                hm.replace(ch,hm.get(ch)+1);
            }
        }
        
        //sorting hashmap by value(frequency in descending order)
        Map<Character, Integer> hm1 = sortByValue(hm);
        
        //appending the generated sorted values in the resultant string
        StringBuilder str  = new StringBuilder();
        for (Map.Entry<Character, Integer> en : hm1.entrySet()) { 
            for(int i=0;i<en.getValue();i++)
            {
                str.append(en.getKey());
            }      
        } 
        
        return str.toString();
    }
}
