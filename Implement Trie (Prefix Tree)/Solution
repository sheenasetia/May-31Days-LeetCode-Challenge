class TrieNode {
    private TrieNode[] children;
    private boolean isEnd;
    
    public TrieNode()
    {   children=new TrieNode[26];  }
    
    public boolean containsKey(char ch)
    {   return children[ch-'a']!=null;  }
    
    public TrieNode get(char ch)
    {   return children[ch-'a'];     }
    
    public void put(char ch,TrieNode node)
    {   children[ch-'a']=node;   }
    
    public void setEnd()
    {   isEnd=true;     }
    
    public boolean isEnd()
    {   return isEnd;   }
    
}
class Trie {

    private TrieNode root;
    /** Initialize your data structure here. */
    public Trie() 
    {    root=new TrieNode();   }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode node=root;
        for(int i=0;i<word.length();i++)
        {
            char currentChar = word.charAt(i);
            if(!node.containsKey(currentChar))
            {
                node.put(currentChar,new TrieNode());
            }
            node=node.get(currentChar);
        }
        node.setEnd();
    }
    
    /** helper method for both finding prefix and searching for the whole word */
    private TrieNode searchPrefix(String word) {
        
        TrieNode node=root;
        for(int i=0;i<word.length();i++)
        {
            char currentChar= word.charAt(i);
            if(node.containsKey(currentChar))
            {
                node = node.get(currentChar);
            }
            else
            {
                return null;
            }
        }
        
        return node;        
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
       TrieNode node = searchPrefix(word);
       return node!=null && node.isEnd();
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode node = searchPrefix(prefix);
        return node!=null;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
