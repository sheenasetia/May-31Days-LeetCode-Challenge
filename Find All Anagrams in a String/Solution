class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        
        if(s.length()==0 || p.length()==0 || s.length()<p.length())
            return new ArrayList<>();
        
        HashMap<Character,Integer> panagram=new HashMap<>();
        for(int i=0;i<p.length();i++)
        {
            if(panagram.isEmpty() || !panagram.containsKey(p.charAt(i)))
                panagram.put(p.charAt(i),1);
            else
                panagram.put(p.charAt(i),panagram.get(p.charAt(i))+1);
        }
        
        int len=p.length();
        
        HashMap<Character,Integer> hm=new HashMap<>();
        
        List<Integer> al=new ArrayList<>();
        
        for(int i=0;i<len;i++)
        {
            if(hm.isEmpty() || !hm.containsKey(s.charAt(i)))
                hm.put(s.charAt(i),1);
            else
                hm.put(s.charAt(i),hm.get(s.charAt(i))+1);
        }
        
        if(hm.equals(panagram))
        al.add(0);
        
        if(p.length()==s.length())
        {
            return al;
        }
        
        for(int i=len;i<s.length();i++)
        {
            if(s.charAt(i)==s.charAt(i-len))
            {
                if(hm.equals(panagram))
                al.add(i-len+1);
            }
            else
            {
                if(hm.get(s.charAt(i-len))==1)
                {
                    hm.remove(s.charAt(i-len));
                }
                else
                {
                    hm.put(s.charAt(i-len),hm.get(s.charAt(i-len))-1);
                }
                
               if(!hm.containsKey(s.charAt(i)))
                hm.put(s.charAt(i),1);
                else
                hm.put(s.charAt(i),hm.get(s.charAt(i))+1);
                
                if(hm.equals(panagram))
                {
                    al.add(i-len+1);
                }
            }
        }
        return al;
    }
}
