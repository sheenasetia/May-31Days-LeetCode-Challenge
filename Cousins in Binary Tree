 /*

Problem : In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.Two nodes of a binary tree are cousins if they have the same depth, but have different parents.We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.Return true if and only if the nodes corresponding to the values x and y are cousins.

Example 1 :
Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2 :
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3 :
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   
   //Node class to keep track of current node , its parent and level in the tree
    
    class Node {
        TreeNode node;
        TreeNode parent;
        int level;
    }
    
    //xNode stores details of number x
    //yNode stores details of number y
    
    Node xNode,yNode;
       
    Node createNode(TreeNode node,TreeNode parent, int level)
    {
        Node n=new Node();
        n.node=node;
        n.parent=parent;
        n.level=level;
        return n;
    }
    
    //get details(like level and parent) of xNode and yNode
    public void getNodeDetails(TreeNode root, int x,int y)
    {
        Queue<Node> q=new LinkedList<>();
        q.add(createNode(root,null,0));
        
        while(q.size()>0)
        {
            Node demo = q.poll();
            if(demo.node.val==x)
                xNode=demo;
            if(demo.node.val==y)
                yNode=demo;
            
            if(demo.node.left!=null)
            {
                q.add(createNode(demo.node.left,demo.node,demo.level+1));   
            }
            if(demo.node.right!=null)
            {
                q.add(createNode(demo.node.right,demo.node,demo.level+1));         
            }
        }
        
    }
    
    public boolean isCousins(TreeNode root, int x, int y) {
        
        xNode=yNode=null;
        getNodeDetails(root, x, y);
        if(xNode.level==1 || xNode.level==0 || yNode.level==1 || yNode.level==0)
            return false;
        
        if(xNode.level == yNode.level)
        {
            if(xNode.parent!=yNode.parent)
                return true;
            else
                return false;
        }
        else
            return false;
    }
    
}
