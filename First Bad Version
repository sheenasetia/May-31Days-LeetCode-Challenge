/*
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); 
 */
      
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
    int left = 0;
    int right = n;
    while (left < right) {
    
        // int mid=(left+right)/2; causes overflow therefore, time limit exceed 
        /*
        Reason:-
        left = 2147483647
        right = 2147483647
        mid using (left+right)/2 = -1
        mid using left +(right-left)/2 = 2147483647
        */
        
        int mid = left + (right - left) / 2;
        if (isBadVersion(mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
    }
}
